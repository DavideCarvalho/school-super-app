// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider = "prisma-kysely"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model School {
  id               String            @id @default(uuid())
  name             String
  slug             String
  Users            User[]
  Subjects         Subject[]
  Classes          Class[]
  PurchaseRequests PurchaseRequest[]
  Canteen          Canteen[]
  SchoolChain      SchoolChain?      @relation(fields: [schoolChainId], references: [id])
  schoolChainId    String?
  Post             Post[]
  AcademicPeriod   AcademicPeriod[]
}

model User {
  id             String   @id @default(uuid())
  name           String
  slug           String
  email          String   @unique
  schoolId       String?
  roleId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  teacherId      String?
  externalAuthId String?
  imageUrl       String?
  active         Boolean  @default(true)

  School                           School?                            @relation(fields: [schoolId], references: [id])
  Role                             Role                               @relation(fields: [roleId], references: [id])
  Teachers                         Teacher[]
  Students                         Student[]                          @relation(name: "student_user_id")
  Notifications                    Notification[]
  PurchaseRequests                 PurchaseRequest[]
  Canteens                         Canteen[]
  Post                             Post[]
  UserLikedPost                    UserLikedPost[]
  Comments                         Comment[]
  CommentLikes                     CommentLike[]
  CanteenPurchases                 CanteenPurchase[]
  PrintRequest                     PrintRequest[]
  StudentHasResponsible            StudentHasResponsible[]
  ResponsibleUserAcceptedOccurence ResponsibleUserAcceptedOccurence[]

  @@index([schoolId])
  @@index([roleId])
  @@index([externalAuthId])
}

model Teacher {
  id             String                @id
  Classes        TeacherHasClass[]
  User           User                  @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Availabilities TeacherAvailability[]
  FixedClass     FixedClass[]
  Subjects       TeacherHasSubject[]

  @@index([id])
}

model TeacherAvailability {
  id        String   @id @default(uuid())
  teacherId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  day       String
  startTime DateTime @db.Time(6)
  endTime   DateTime @db.Time(6)

  Teacher         Teacher           @relation(fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  TeacherHasClass TeacherHasClass[]
}

model Student {
  id           String @id
  canteenLimit Float?

  User                     User                       @relation(name: "student_user_id", fields: [id], references: [id])
  StudentHasResponsible    StudentHasResponsible[]
  Occurence                Occurence[]
  StudentHasAssignment     StudentHasAssignment[]
  StudentHasAcademicPeriod StudentHasAcademicPeriod[]

  @@index([id])
}

model StudentHasAcademicPeriod {
  id               String @id @default(uuid())
  studentId        String
  academicPeriodId String

  Student        Student        @relation(fields: [studentId], references: [id])
  AcademicPeriod AcademicPeriod @relation(fields: [academicPeriodId], references: [id])
}

model StudentHasResponsible {
  id            String   @id @default(uuid())
  studentId     String
  responsibleId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Student         Student @relation(fields: [studentId], references: [id])
  ResponsibleUser User    @relation(fields: [responsibleId], references: [id])
}

model AcademicPeriodHoliday {
  id               String   @id @default(uuid())
  date             DateTime @db.Date()
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  academicPeriodId String

  AcademicPeriod AcademicPeriod @relation(fields: [academicPeriodId], references: [id])
}

model AcademicPeriodWeekendClass {
  id               String   @id @default(uuid())
  academicPeriodId String
  date             DateTime @db.Date()
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  AcademicPeriod AcademicPeriod @relation(fields: [academicPeriodId], references: [id])
}

model AcademicPeriod {
  id        String   @id @default(uuid())
  startDate DateTime @db.Date()
  endDate   DateTime @db.Date()
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  schoolId  String
  isClosed  Boolean  @default(false)

  School         School                       @relation(fields: [schoolId], references: [id])
  Assignments    Assignment[]
  Holidays       AcademicPeriodHoliday[]
  WeekendClasses AcademicPeriodWeekendClass[]
  Calendars      CalendarHasAcademicPeriod[]
  Students       StudentHasAcademicPeriod[]
}

model Canteen {
  id                String   @id @default(uuid())
  schoolId          String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  responsibleUserId String

  School          School        @relation(fields: [schoolId], references: [id])
  ResponsibleUser User          @relation(fields: [responsibleUserId], references: [id])
  CanteenItem     CanteenItem[]
}

model Attendance {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  note           String   @db.Text
  date           DateTime @db.Date
  calendarSlotId String

  StudentHasClassAttendance StudentHasClassAttendance[]
  CalendarSlot              CalendarSlot                @relation(fields: [calendarSlotId], references: [id])
}

model StudentHasClassAttendance {
  id           String   @id @default(uuid())
  studentId    String
  attendanceId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Attendance Attendance @relation(fields: [attendanceId], references: [id])
}

model Occurence {
  id             String   @id @default(uuid())
  date           DateTime @db.Date
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  studentId      String
  text           String   @db.Text
  calendarSlotId String

  Student                          Student                            @relation(fields: [studentId], references: [id])
  ResponsibleUserAcceptedOccurence ResponsibleUserAcceptedOccurence[]
  CalendarSlot                     CalendarSlot                       @relation(fields: [calendarSlotId], references: [id])
}

model ResponsibleUserAcceptedOccurence {
  id                String   @id @default(uuid())
  responsibleUserId String
  occurenceId       String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  ResponsibleUser User      @relation(fields: [responsibleUserId], references: [id])
  Occurence       Occurence @relation(fields: [occurenceId], references: [id])
}

model CanteenItem {
  id        String   @id @default(uuid())
  name      String
  price     Float
  canteenId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)

  Canteen              Canteen                @relation(fields: [canteenId], references: [id])
  CanteenItemPurchased CanteenItemPurchased[]

  @@index([canteenId])
}

model CanteenItemPurchased {
  id                String   @id @default(uuid())
  price             Float
  quantity          Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  canteenPurchaseId String
  canteenItemId     String

  CanteenItem     CanteenItem     @relation(fields: [canteenItemId], references: [id])
  CanteenPurchase CanteenPurchase @relation(fields: [canteenPurchaseId], references: [id])
}

model CanteenPurchase {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  payed     Boolean  @default(true)

  userId String

  User User @relation(fields: [userId], references: [id])

  itemsPurchased CanteenItemPurchased[]
}

model CalendarSlot {
  id                String   @id @default(uuid())
  teacherHasClassId String?
  classWeekDay      Int
  startTime         DateTime @db.Time(6)
  endTime           DateTime @db.Time(6)
  minutes           Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  calendarId        String

  TeacherHasClass TeacherHasClass? @relation(fields: [teacherHasClassId], references: [id])
  Calendar        Calendar         @relation(fields: [calendarId], references: [id])
  Attendance      Attendance[]
  Occurence       Occurence[]

  @@unique([teacherHasClassId, classWeekDay, startTime])
}

model TeacherHasClass {
  id                    String   @id @default(uuid())
  teacherId             String
  classId               String
  subjectId             String
  subjectQuantity       Int      @default(1)
  classWeekDay          String?  @db.VarChar(10)
  startTime             String?  @db.VarChar(10)
  endTime               String?  @db.VarChar(10)
  teacherAvailabilityId String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  isActive              Boolean  @default(true)

  Teacher Teacher @relation(fields: [teacherId], references: [id])
  Class   Class   @relation(fields: [classId], references: [id])
  Subject Subject @relation(fields: [subjectId], references: [id])

  TeacherAvailability TeacherAvailability? @relation(fields: [teacherAvailabilityId], references: [id])
  CalendarSlot        CalendarSlot[]
  Assignment          Assignment[]

  @@index([teacherId])
  @@index([classId])
  @@index([subjectId])
}

model Assignment {
  id                String   @id @default(uuid())
  name              String
  description       String?  @db.Text
  dueDate           DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  grade             Float    @default(0)
  teacherHasClassId String
  academicPeriodId  String

  StudentHasAssignment StudentHasAssignment[]
  AcademicPeriod       AcademicPeriod         @relation(fields: [academicPeriodId], references: [id])
  TeacherHasClass      TeacherHasClass        @relation(fields: [teacherHasClassId], references: [id])
}

model StudentHasAssignment {
  id           String   @id @default(uuid())
  studentId    String
  assignmentId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  grade        Float?

  Student    Student    @relation(fields: [studentId], references: [id])
  Assignment Assignment @relation(fields: [assignmentId], references: [id])
}

model TeacherHasSubject {
  id        String @id @default(uuid())
  teacherId String
  subjectId String

  Teacher Teacher @relation(fields: [teacherId], references: [id])
  Subject Subject @relation(fields: [subjectId], references: [id])

  @@index([teacherId, subjectId])
}

model Subject {
  id                      String              @id @default(uuid())
  name                    String
  slug                    String
  schoolId                String
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  TeacherHasClass         TeacherHasClass[]
  School                  School              @relation(fields: [schoolId], references: [id])
  quantityNeededScheduled Int                 @default(0)
  FixedClass              FixedClass[]
  TeacherHasSubject       TeacherHasSubject[]

  @@index([schoolId])
}

model PrintRequest {
  id               String   @id @default(uuid())
  userId           String
  name             String
  path             String
  status           String
  frontAndBack     Boolean  @default(false)
  rejectedFeedback String?  @db.Text
  quantity         Int      @default(1)
  dueDate          DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])
}

model Role {
  id    String @id @default(uuid())
  name  String
  Users User[]
}

model Class {
  id        String   @id @default(uuid())
  name      String
  slug      String
  schoolId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  TeacherHasClass TeacherHasClass[]
  School          School            @relation(fields: [schoolId], references: [id])
  FixedClass      FixedClass[]
  ClassSchedule   ClassSchedule[]
  Calendar        Calendar[]

  @@index([schoolId])
}

model PurchaseRequest {
  id                   String    @id @default(uuid())
  productName          String
  quantity             Int // quantidade do produto de acordo com quem fez o pedido
  finalQuantity        Int? // quantidade final do produto de acordo com quem fez a compra
  status               String
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  proposal             String?   @db.Text
  schoolId             String
  dueDate              DateTime // dia que a pessoa precisa usar o produto
  value                Float // valor do produto de acordo com quem fez o pedido
  unitValue            Float // valor unitário do produto de acordo com quem fez a compra
  finalUnitValue       Float? // valor unitário final do produto de acordo com quem fez a compra
  finalValue           Float? // valor final do produto de acordo com quem fez a compra
  description          String?   @db.Text
  productUrl           String?   @db.VarChar(1000)
  purchaseDate         DateTime? // dia que foi comprado
  estimatedArrivalDate DateTime? // dia que vai chegar depois de aprovado
  arrivalDate          DateTime? // dia que chegou
  rejectionReason      String?   @db.Text
  requestingUserId     String
  receiptPath          String?

  School School @relation(fields: [schoolId], references: [id])
  User   User   @relation(fields: [requestingUserId], references: [id])

  @@index([schoolId])
  @@index([requestingUserId])
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  body      String?  @db.Text
  cleared   Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model SchoolChain {
  id        String   @id @default(uuid())
  name      String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Schools School[]
}

model Post {
  id        Int      @id @default(autoincrement())
  uuid      String   @default(uuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  schoolId  String?

  User          User            @relation(fields: [userId], references: [id])
  School        School?         @relation(fields: [schoolId], references: [id])
  UserLikedPost UserLikedPost[]
  Comments      Comment[]

  @@index([uuid])
}

model UserLikedPost {
  id        String   @id @default(uuid())
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  User User @relation(fields: [userId], references: [id])
  Post Post @relation(fields: [postId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  uuid      String   @default(uuid())
  postId    Int
  comment   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  User  User          @relation(fields: [userId], references: [id])
  Post  Post          @relation(fields: [postId], references: [id])
  Likes CommentLike[]

  @@index([uuid])
}

model CommentLike {
  id        String   @id @default(uuid())
  commentId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  User    User    @relation(fields: [userId], references: [id])
  Comment Comment @relation(fields: [commentId], references: [id])
}

model CalendarHasAcademicPeriod {
  id               String @id @default(uuid())
  calendarId       String
  academicPeriodId String

  Calendar       Calendar       @relation(fields: [calendarId], references: [id])
  AcademicPeriod AcademicPeriod @relation(fields: [academicPeriodId], references: [id])
}

model Calendar {
  id        String   @id @default(uuid())
  classId   String
  name      String // Nome do calendário, por exemplo, "Calendário 2024"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true) // Flag para indicar se o calendário é o atual

  Class                     Class                       @relation(fields: [classId], references: [id])
  CalendarSlot              CalendarSlot[]
  CalendarHasAcademicPeriod CalendarHasAcademicPeriod[]

  @@index([classId])
}

model CalendarConfig {
  id                 String   @id @default(uuid())
  classesConfig      Json?
  classesClashConfig Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model ClassSchedule {
  id        String   @id @default(uuid())
  classId   String
  name      String // Nome do calendário, por exemplo, "Calendário 2024"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true) // Flag para indicar se o calendário é o atual

  Class        Class        @relation(fields: [classId], references: [id])
  FixedClasses FixedClass[]

  @@index([classId])
}

model FixedClass {
  id              String   @id @default(uuid())
  classScheduleId String
  teacherId       String
  classId         String
  subjectId       String
  subjectQuantity Int      @default(1)
  classWeekDay    String   @db.VarChar(10)
  startTime       String   @db.VarChar(10)
  endTime         String   @db.VarChar(10)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  Teacher       Teacher       @relation(fields: [teacherId], references: [id])
  Class         Class         @relation(fields: [classId], references: [id])
  Subject       Subject       @relation(fields: [subjectId], references: [id])
  ClassSchedule ClassSchedule @relation(fields: [classScheduleId], references: [id])

  @@index([teacherId])
  @@index([classId])
  @@index([subjectId])
  @@index([classScheduleId])
}
