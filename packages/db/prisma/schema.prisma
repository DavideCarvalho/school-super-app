// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider = "prisma-kysely"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model School {
  id               String            @id @default(cuid())
  name             String
  slug             String
  Users            User[]
  Subjects         Subject[]
  Classes          Class[]
  PurchaseRequests PurchaseRequest[]
  Canteen          Canteen[]
  SchoolChain      SchoolChain?      @relation(fields: [schoolChainId], references: [id])
  schoolChainId    String?
  Post             Post[]
}

model User {
  id             String   @id @default(cuid())
  name           String
  slug           String
  email          String   @unique
  schoolId       String?
  roleId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  teacherId      String?
  externalAuthId String?
  imageUrl       String?
  active         Boolean  @default(true)

  School           School?           @relation(fields: [schoolId], references: [id])
  Role             Role              @relation(fields: [roleId], references: [id])
  Teachers         Teacher[]
  Students         Student[]         @relation(name: "student_user_id")
  ResponsibleUsers Student[]         @relation(name: "student_responsible_user_id")
  Notifications    Notification[]
  PurchaseRequests PurchaseRequest[]
  Canteens         Canteen[]
  Post             Post[]
  UserLikedPost    UserLikedPost[]
  Comments         Comment[]
  CommentLikes     CommentLike[]

  @@index([schoolId])
  @@index([roleId])
  @@index([externalAuthId])
}

model Teacher {
  id                  String                @id
  TeacherHasClasses   TeacherHasClass[]
  User                User                  @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  File                File[]
  TeacherAvailability TeacherAvailability[]
  TeacherHasSubject   TeacherHasSubject[]

  @@index([id])
}

model TeacherAvailability {
  id        String   @id @default(cuid())
  teacherId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  day       String
  startTime String
  endTime   String

  Teacher         Teacher           @relation(fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  TeacherHasClass TeacherHasClass[]
}

model Student {
  id                String @id
  classId           String
  responsibleUserId String
  canteenLimit      Float?

  CanteenItemPurchases StudentCanteenItemPurchase[]
  User                 User                         @relation(name: "student_user_id", fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ResponsibleUser      User                         @relation(name: "student_responsible_user_id", fields: [responsibleUserId], references: [id])
  StudentPei           StudentPei[]
  Class                Class                        @relation(fields: [classId], references: [id])

  @@index([id])
}

model Canteen {
  id                String   @id @default(cuid())
  schoolId          String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  responsibleUserId String

  School          School        @relation(fields: [schoolId], references: [id])
  ResponsibleUser User          @relation(fields: [responsibleUserId], references: [id])
  CanteenItem     CanteenItem[]
}

model CanteenItem {
  id        String   @id @default(cuid())
  name      String
  price     Float
  canteenId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Canteen                     Canteen                      @relation(fields: [canteenId], references: [id])
  StudentCanteenItemPurchases StudentCanteenItemPurchase[]

  @@index([canteenId])
}

model StudentCanteenItemPurchase {
  id            String   @id @default(cuid())
  studentId     String
  canteenItemId String
  price         Float
  quantity      Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  payed         Boolean  @default(false)

  Student     Student     @relation(fields: [studentId], references: [id])
  CanteenItem CanteenItem @relation(fields: [canteenItemId], references: [id])

  @@index([canteenItemId])
  @@index([studentId])
}

model TeacherHasSubject {
  id        String   @id @default(cuid())
  teacherId String
  subjectId String
  classId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Teacher Teacher @relation(fields: [teacherId], references: [id])
  Subject Subject @relation(fields: [subjectId], references: [id])
  Class   Class   @relation(fields: [classId], references: [id])
}

model TeacherHasClass {
  id                    String   @id @default(cuid())
  teacherId             String
  classId               String
  subjectId             String
  classWeekDay          String   @db.VarChar(10)
  classTime             String   @db.VarChar(10)
  startTime             String   @db.VarChar(10)
  endTime               String   @db.VarChar(10)
  teacherAvailabilityId String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  active                Boolean  @default(true)

  Teacher Teacher @relation(fields: [teacherId], references: [id])
  Class   Class   @relation(fields: [classId], references: [id])
  Subject Subject @relation(fields: [subjectId], references: [id])

  TeacherAvailability TeacherAvailability @relation(fields: [teacherAvailabilityId], references: [id])
}

model Subject {
  id                      String              @id @default(cuid())
  name                    String
  slug                    String
  schoolId                String
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  TeacherHasClass         TeacherHasClass[]
  School                  School              @relation(fields: [schoolId], references: [id])
  File                    File[]
  TeacherHasSubject       TeacherHasSubject[]
  quantityNeededScheduled Int                 @default(0)

  @@index([schoolId])
}

model File {
  id               String   @id @default(cuid())
  teacherId        String
  classId          String
  subjectId        String
  name             String
  path             String
  status           String
  frontAndBack     Boolean  @default(false)
  rejectedFeedback String?  @db.Text
  quantity         Int      @default(1)
  dueDate          DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  Teacher Teacher @relation(fields: [teacherId], references: [id])
  Class   Class   @relation(fields: [classId], references: [id])
  Subject Subject @relation(fields: [subjectId], references: [id])

  @@index([teacherId])
  @@index([classId])
  @@index([subjectId])
}

model Role {
  id    String @id @default(cuid())
  name  String
  Users User[]
}

model Class {
  id        String   @id @default(cuid())
  name      String
  slug      String
  schoolId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  TeacherHasClass   TeacherHasClass[]
  School            School              @relation(fields: [schoolId], references: [id])
  File              File[]
  Student           Student[]
  TeacherHasSubject TeacherHasSubject[]

  @@index([schoolId])
}

model PurchaseRequest {
  id                   String    @id @default(cuid())
  productName          String
  quantity             Int // quantidade do produto de acordo com quem fez o pedido
  finalQuantity        Int? // quantidade final do produto de acordo com quem fez a compra
  status               String
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  proposal             String?   @db.Text
  schoolId             String
  dueDate              DateTime // dia que a pessoa precisa usar o produto
  value                Float // valor do produto de acordo com quem fez o pedido
  unitValue            Float // valor unitário do produto de acordo com quem fez a compra
  finalUnitValue       Float? // valor unitário final do produto de acordo com quem fez a compra
  finalValue           Float? // valor final do produto de acordo com quem fez a compra
  description          String?   @db.Text
  productUrl           String?   @db.VarChar(1000)
  purchaseDate         DateTime? // dia que foi comprado
  estimatedArrivalDate DateTime? // dia que vai chegar depois de aprovado
  arrivalDate          DateTime? // dia que chegou
  rejectionReason      String?   @db.Text
  requestingUserId     String
  receiptPath          String?

  School School @relation(fields: [schoolId], references: [id])
  User   User   @relation(fields: [requestingUserId], references: [id])

  @@index([schoolId])
  @@index([requestingUserId])
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  body      String?  @db.Text
  cleared   Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model StudentPei {
  id                 String   @id @default(cuid())
  studentId          String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  report             String?  @db.Text
  needs              String?  @db.Text
  interests          String?  @db.Text
  skillsToWork       String?  @db.Text
  learningObjectives String?  @db.Text
  resourcesAndTools  String?  @db.Text
  evaluation         String?  @db.Text

  Student Student @relation(fields: [studentId], references: [id])

  @@index([studentId])
}

model SchoolChain {
  id        String   @id @default(cuid())
  name      String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Schools School[]
}

model Post {
  id        Int      @id @default(autoincrement())
  uuid      String   @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  schoolId  String?

  User          User            @relation(fields: [userId], references: [id])
  School        School?         @relation(fields: [schoolId], references: [id])
  UserLikedPost UserLikedPost[]
  Comments      Comment[]

  @@index([uuid])
}

model UserLikedPost {
  id        String   @id @default(cuid())
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  User User @relation(fields: [userId], references: [id])
  Post Post @relation(fields: [postId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  uuid      String   @default(cuid())
  postId    Int
  comment   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  User  User          @relation(fields: [userId], references: [id])
  Post  Post          @relation(fields: [postId], references: [id])
  Likes CommentLike[]

  @@index([uuid])
}

model CommentLike {
  id        String   @id @default(cuid())
  commentId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  User    User    @relation(fields: [userId], references: [id])
  Comment Comment @relation(fields: [commentId], references: [id])
}
