// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model School {
  id       String    @id @default(cuid())
  name     String
  slug     String
  Users    User[]
  Subjects Subject[]
  Class    Class[]
}

model User {
  id        String   @id @default(cuid())
  name      String
  slug      String
  email     String   @unique
  schoolId  String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teacherId String?

  School  School    @relation(fields: [schoolId], references: [id])
  Role    Role      @relation(fields: [roleId], references: [id])
  Teacher Teacher[]

  @@index([schoolId, roleId])
}

model Teacher {
  id                String            @id
  TeacherHasClasses TeacherHasClass[]
  User              User              @relation(fields: [id], references: [id])
  File              File[]

  @@index([id])
}

model TeacherHasClass {
  teacherId    String
  classId      String
  subjectId    String
  classWeekDay String
  classTime    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Teacher Teacher @relation(fields: [teacherId], references: [id])
  Class   Class   @relation(fields: [classId], references: [id])
  Subject Subject @relation(fields: [subjectId], references: [id])

  @@unique([teacherId, classId, subjectId])
  @@unique([teacherId, classWeekDay, classTime])
  @@unique([classId, classWeekDay, classTime])
  @@index([teacherId, classId, subjectId])
}

model Subject {
  id              String            @id @default(cuid())
  name            String
  slug            String
  schoolId        String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  TeacherHasClass TeacherHasClass[]
  School          School            @relation(fields: [schoolId], references: [id])
  File            File[]

  @@index([schoolId])
}

model File {
  id           String   @id @default(cuid())
  teacherId    String
  classId      String
  subjectId    String
  name         String
  path         String
  status       String
  frontAndBack Boolean  @default(false)
  quantity     Int      @default(1)
  dueDate      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Teacher Teacher @relation(fields: [teacherId], references: [id])
  Class   Class   @relation(fields: [classId], references: [id])
  Subject Subject @relation(fields: [subjectId], references: [id])
}

model Role {
  id    String @id @default(cuid())
  name  String
  Users User[]
}

model Class {
  id        String   @id @default(cuid())
  name      String
  slug      String
  schoolId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  TeacherHasClass TeacherHasClass[]
  School          School            @relation(fields: [schoolId], references: [id])
  File            File[]
}
