// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model School {
  id               String            @id @default(cuid())
  name             String
  slug             String
  Users            User[]
  Subjects         Subject[]
  Classes          Class[]
  PurchaseRequests PurchaseRequest[]
}

model User {
  id        String   @id @default(cuid())
  name      String
  slug      String
  email     String   @unique
  schoolId  String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teacherId String?

  School          School            @relation(fields: [schoolId], references: [id])
  Role            Role              @relation(fields: [roleId], references: [id])
  Teacher         Teacher[]
  Notification    Notification[]
  PurchaseRequest PurchaseRequest[]

  @@index([schoolId])
  @@index([roleId])
}

model Teacher {
  id                String            @id
  TeacherHasClasses TeacherHasClass[]
  User              User              @relation(fields: [id], references: [id])
  File              File[]

  @@index([id])
}

model TeacherHasClass {
  teacherId    String
  classId      String
  subjectId    String
  classWeekDay String
  classTime    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Teacher Teacher @relation(fields: [teacherId], references: [id])
  Class   Class   @relation(fields: [classId], references: [id])
  Subject Subject @relation(fields: [subjectId], references: [id])

  @@unique([teacherId, classId, subjectId])
  @@unique([teacherId, classWeekDay, classTime])
  @@unique([classId, classWeekDay, classTime])
  @@index([teacherId])
  @@index([classId])
  @@index([subjectId])
  @@index([teacherId, classId, subjectId])
}

model Subject {
  id              String            @id @default(cuid())
  name            String
  slug            String
  schoolId        String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  TeacherHasClass TeacherHasClass[]
  School          School            @relation(fields: [schoolId], references: [id])
  File            File[]

  @@index([schoolId])
}

model File {
  id           String   @id @default(cuid())
  teacherId    String
  classId      String
  subjectId    String
  name         String
  path         String
  status       String
  frontAndBack Boolean  @default(false)
  quantity     Int      @default(1)
  dueDate      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Teacher Teacher @relation(fields: [teacherId], references: [id])
  Class   Class   @relation(fields: [classId], references: [id])
  Subject Subject @relation(fields: [subjectId], references: [id])

  @@index([teacherId])
  @@index([classId])
  @@index([subjectId])
}

model Role {
  id    String @id @default(cuid())
  name  String
  Users User[]
}

model Class {
  id        String   @id @default(cuid())
  name      String
  slug      String
  schoolId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  TeacherHasClass TeacherHasClass[]
  School          School            @relation(fields: [schoolId], references: [id])
  File            File[]

  @@index([schoolId])
}

model PurchaseRequest {
  id               String    @id @default(cuid())
  productName      String
  quantity         Int
  status           String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  schoolId         String
  dueDate          DateTime // dia que o professor precisa usar
  value            Float // valor do produto de acordo com o professor
  finalValue       Float? // valor final do produto de acordo com quem fez a compra
  description      String?   @db.Text
  productUrl       String?
  estimatedDueDate DateTime? // dia que vai chegar depois de aprovado
  arrivalDate      DateTime? // dia que chegou
  requestingUserId String

  School School @relation(fields: [schoolId], references: [id])
  User   User   @relation(fields: [requestingUserId], references: [id])

  @@index([schoolId])
  @@index([requestingUserId])
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  body      String?  @db.Text
  cleared   Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])

  @@index([userId])
}
